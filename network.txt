Network(
  (embedding): Embedding(
    (embedding): Embedding(967, 300, padding_idx=0)
  )
  (blocks): ModuleList(
    (0): ModuleDict(
      (alignment): MappedAlignment(
        (projection): Sequential(
          (0): Dropout(p=0.2, inplace=False)
          (1): Linear(
            (model): Sequential(
              (0): Linear(in_features=500, out_features=200, bias=True)
              (1): GeLU()
            )
          )
        )
      )
      (encoder): Encoder(
        (encoders): ModuleList(
          (0): Conv1d(
            (model): ModuleList(
              (0): Sequential(
                (0): Conv1d(300, 200, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GeLU()
              )
            )
          )
          (1): Conv1d(
            (model): ModuleList(
              (0): Sequential(
                (0): Conv1d(200, 200, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GeLU()
              )
            )
          )
          (2): Conv1d(
            (model): ModuleList(
              (0): Sequential(
                (0): Conv1d(200, 200, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GeLU()
              )
            )
          )
        )
      )
      (fusion): FullFusion(
        (fusion1): Linear(
          (model): Sequential(
            (0): Linear(in_features=1000, out_features=200, bias=True)
            (1): GeLU()
          )
        )
        (fusion2): Linear(
          (model): Sequential(
            (0): Linear(in_features=1000, out_features=200, bias=True)
            (1): GeLU()
          )
        )
        (fusion3): Linear(
          (model): Sequential(
            (0): Linear(in_features=1000, out_features=200, bias=True)
            (1): GeLU()
          )
        )
        (fusion): Linear(
          (model): Sequential(
            (0): Linear(in_features=600, out_features=200, bias=True)
            (1): GeLU()
          )
        )
      )
    )
    (1): ModuleDict(
      (alignment): MappedAlignment(
        (projection): Sequential(
          (0): Dropout(p=0.2, inplace=False)
          (1): Linear(
            (model): Sequential(
              (0): Linear(in_features=700, out_features=200, bias=True)
              (1): GeLU()
            )
          )
        )
      )
      (encoder): Encoder(
        (encoders): ModuleList(
          (0): Conv1d(
            (model): ModuleList(
              (0): Sequential(
                (0): Conv1d(500, 200, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GeLU()
              )
            )
          )
          (1): Conv1d(
            (model): ModuleList(
              (0): Sequential(
                (0): Conv1d(200, 200, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GeLU()
              )
            )
          )
          (2): Conv1d(
            (model): ModuleList(
              (0): Sequential(
                (0): Conv1d(200, 200, kernel_size=(3,), stride=(1,), padding=(1,))
                (1): GeLU()
              )
            )
          )
        )
      )
      (fusion): FullFusion(
        (fusion1): Linear(
          (model): Sequential(
            (0): Linear(in_features=1400, out_features=200, bias=True)
            (1): GeLU()
          )
        )
        (fusion2): Linear(
          (model): Sequential(
            (0): Linear(in_features=1400, out_features=200, bias=True)
            (1): GeLU()
          )
        )
        (fusion3): Linear(
          (model): Sequential(
            (0): Linear(in_features=1400, out_features=200, bias=True)
            (1): GeLU()
          )
        )
        (fusion): Linear(
          (model): Sequential(
            (0): Linear(in_features=600, out_features=200, bias=True)
            (1): GeLU()
          )
        )
      )
    )
  )
  (connection): AugmentedResidual()
  (pooling): Pooling()
  (prediction): Prediction(
    (dense): Sequential(
      (0): Dropout(p=0.2, inplace=False)
      (1): Linear(
        (model): Sequential(
          (0): Linear(in_features=400, out_features=200, bias=True)
          (1): GeLU()
        )
      )
      (2): Dropout(p=0.2, inplace=False)
      (3): Linear(
        (model): Sequential(
          (0): Linear(in_features=200, out_features=2, bias=True)
        )
      )
    )
  )
)

embedding.embedding.weight
blocks.0.alignment.temperature
blocks.0.alignment.projection.1.model.0.bias
blocks.0.alignment.projection.1.model.0.weight_g
blocks.0.alignment.projection.1.model.0.weight_v
blocks.0.encoder.encoders.0.model.0.0.bias
blocks.0.encoder.encoders.0.model.0.0.weight_g
blocks.0.encoder.encoders.0.model.0.0.weight_v
blocks.0.encoder.encoders.1.model.0.0.bias
blocks.0.encoder.encoders.1.model.0.0.weight_g
blocks.0.encoder.encoders.1.model.0.0.weight_v
blocks.0.encoder.encoders.2.model.0.0.bias
blocks.0.encoder.encoders.2.model.0.0.weight_g
blocks.0.encoder.encoders.2.model.0.0.weight_v
blocks.0.fusion.fusion1.model.0.bias
blocks.0.fusion.fusion1.model.0.weight_g
blocks.0.fusion.fusion1.model.0.weight_v
blocks.0.fusion.fusion2.model.0.bias
blocks.0.fusion.fusion2.model.0.weight_g
blocks.0.fusion.fusion2.model.0.weight_v
blocks.0.fusion.fusion3.model.0.bias
blocks.0.fusion.fusion3.model.0.weight_g
blocks.0.fusion.fusion3.model.0.weight_v
blocks.0.fusion.fusion.model.0.bias
blocks.0.fusion.fusion.model.0.weight_g
blocks.0.fusion.fusion.model.0.weight_v
blocks.1.alignment.temperature
blocks.1.alignment.projection.1.model.0.bias
blocks.1.alignment.projection.1.model.0.weight_g
blocks.1.alignment.projection.1.model.0.weight_v
blocks.1.encoder.encoders.0.model.0.0.bias
blocks.1.encoder.encoders.0.model.0.0.weight_g
blocks.1.encoder.encoders.0.model.0.0.weight_v
blocks.1.encoder.encoders.1.model.0.0.bias
blocks.1.encoder.encoders.1.model.0.0.weight_g
blocks.1.encoder.encoders.1.model.0.0.weight_v
blocks.1.encoder.encoders.2.model.0.0.bias
blocks.1.encoder.encoders.2.model.0.0.weight_g
blocks.1.encoder.encoders.2.model.0.0.weight_v
blocks.1.fusion.fusion1.model.0.bias
blocks.1.fusion.fusion1.model.0.weight_g
blocks.1.fusion.fusion1.model.0.weight_v
blocks.1.fusion.fusion2.model.0.bias
blocks.1.fusion.fusion2.model.0.weight_g
blocks.1.fusion.fusion2.model.0.weight_v
blocks.1.fusion.fusion3.model.0.bias
blocks.1.fusion.fusion3.model.0.weight_g
blocks.1.fusion.fusion3.model.0.weight_v
blocks.1.fusion.fusion.model.0.bias
blocks.1.fusion.fusion.model.0.weight_g
blocks.1.fusion.fusion.model.0.weight_v
prediction.dense.1.model.0.bias
prediction.dense.1.model.0.weight_g
prediction.dense.1.model.0.weight_v
prediction.dense.3.model.0.bias
prediction.dense.3.model.0.weight_g
prediction.dense.3.model.0.weight_v